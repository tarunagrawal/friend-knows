package com.system.you.review.test.request;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNotSame;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.fail;

import java.util.List;

import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;

import com.system.you.review.category.dao.ICategoryDAO;
import com.system.you.review.item.bean.Item;
import com.system.you.review.item.dao.ItemDAO;
import com.system.you.review.request.bean.Review;
import com.system.you.review.request.bean.Request;
import com.system.you.review.request.bean.Reviewer;
import com.system.you.review.request.dao.ReviewDAO;
import com.system.you.review.request.dao.RequestDAO;
import com.system.you.review.request.dao.ReviewerDAO;
import com.system.you.review.test.IConstants;
import com.system.you.review.test.ReviewTestCase;
import com.system.you.review.user.bean.ReviewUser;
import com.system.you.review.user.dao.ReviewUserDAO;

@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration(locations=IConstants.TEST_CONFIG_LOCATION)
public class TestReviewDAOImpl extends  ReviewTestCase {

	@BeforeClass
	public static void setUpBeforeClass() throws Exception {
	}

	@AfterClass
	public static void tearDownAfterClass() throws Exception {
	}

	@Before
	public void setUp() throws Exception {
	}

	@After
	public void tearDown() throws Exception {
	}

	@Test
	public void testAddReview() {
		try{
			ReviewUser reviewee = reviewUserDAO.getUser(REVIEWEE);
			Item item = itemDAO.getItem(ITEM);
			ReviewUser reviewer = reviewUserDAO.getUser(REVIEWER);
			Request reviewRequest = saveReviewRequest(reviewee, item);
			Reviewer reviewerRequest = saveReviewerRequest(
													reviewRequest,reviewer, Reviewer.Channel.SMS);
			saveReview(reviewerRequest, Review.NOT_VERIFED);
		}catch(Exception ex){
			ex.printStackTrace();
			fail("should not throw exception");
		}
	}
	
	@Test
	public void testGetReview(){
		try{
			ReviewUser reviewee = createReviewUser(getID()+"@gmail.com");
			Item item = itemDAO.getItem(ITEM);
			ReviewUser reviewer = createReviewUser(getID()+"@gmail.com");;
			Request reviewRequest = saveReviewRequest(reviewee, item);
			Reviewer reviewerRequest = saveReviewerRequest(
													reviewRequest,reviewer, Reviewer.Channel.SMS);
			Review review = saveReview(reviewerRequest, Review.NOT_VERIFED);
			Review persistedReview = reviewDAO.getReview(review.getReviewID());
			assertNotNull(persistedReview);
			assertNotSame(persistedReview, review);
			assertEquals(persistedReview.getReviewID(),review.getReviewID());
		}catch(Exception ex){
			ex.printStackTrace();
			fail("should not throw exception");
		}
	}

	@Test
	public void testGetReviewsByReviewerRequestID(){
		try{
			ReviewUser revieweeOne = createReviewUser(getID()+"@gmail.com");
			ReviewUser revieweeTwo = createReviewUser(getID()+"@gmail.com");
			Item item = itemDAO.getItem(ITEM);
			ReviewUser reviewer = createReviewUser(getID()+"@gmail.com");;
			Request reviewRequestOne = saveReviewRequest(revieweeOne, item);
			Reviewer reviewerRequestOne = saveReviewerRequest(
					reviewRequestOne,reviewer, Reviewer.Channel.SMS);
			Request reviewRequestTwo = saveReviewRequest(revieweeTwo, item);
			Reviewer reviewerRequestTwo = saveReviewerRequest(
										reviewRequestTwo,reviewer, Reviewer.Channel.SMS);
			saveReview(reviewerRequestOne, Review.NOT_VERIFED);
			saveReview(reviewerRequestTwo, Review.NOT_VERIFED);
			List<Review> list = reviewDAO.getReviewsByReviewer(reviewer);
			assertNotNull(list);
			assertEquals(2, list.size());
		}catch(Exception ex){
			ex.printStackTrace();
			fail("should not throw exception");
		}
	}
	
	
	@Test
	public void testGetReviewsByItem(){
		try{
			Item item = createItem(getID()+"");
			ReviewUser reviewee= createReviewUser(getID()+"@gmail.com");
			Request reviewRequest = saveReviewRequest(reviewee, item);
			ReviewUser reviewer = createReviewUser(getID()+"@gmail.com");
			Reviewer reviewerRequest= saveReviewerRequest(
					reviewRequest,reviewer, Reviewer.Channel.SMS);
			
			ReviewUser revieweeTwo= createReviewUser(getID()+"@gmail.com");
			Request reviewRequestTwo = saveReviewRequest(revieweeTwo, item);
			ReviewUser reviewerTwo = createReviewUser(getID()+"@gmail.com");
			Reviewer reviewerRequestTwo= saveReviewerRequest(
					reviewRequest,reviewerTwo, Reviewer.Channel.SMS);
			ReviewUser reviewerThree = createReviewUser(getID()+"@gmail.com");
			Reviewer reviewerRequestThree= saveReviewerRequest(
					reviewRequestTwo,reviewerThree, Reviewer.Channel.SMS);
			
			saveReview(reviewerRequest, Review.NOT_VERIFED);
			saveReview(reviewerRequest, Review.NOT_VERIFED);
			saveReview(reviewerRequestTwo, Review.NOT_VERIFED);
			saveReview(reviewerRequestTwo, Review.NOT_VERIFED);
			saveReview(reviewerRequestThree, Review.NOT_VERIFED);
			List<Review> list = reviewDAO.getReviewsByItem(item);
			assertNotNull(list);
			assertEquals(5, list.size());
		}catch(Exception ex){
			ex.printStackTrace();
			fail("should not throw exception");
		}
	}
	
	public void testGetReviewsByReviewer(){
		try{
			ReviewUser reviewer = createReviewUser(getID()+"@gmail.com");
			ReviewUser reviewee= createReviewUser(getID()+"@gmail.com");
			Item item = createItem(getID()+"");
			
			Request reviewRequest = saveReviewRequest(reviewee, item);
			Reviewer reviewerRequest= saveReviewerRequest(
					reviewRequest,reviewer, Reviewer.Channel.SMS);
			
			ReviewUser revieweeTwo= createReviewUser(getID()+"@gmail.com");
			Request reviewRequestTwo = saveReviewRequest(revieweeTwo, item);
			Reviewer reviewerRequestTwo= saveReviewerRequest(
					reviewRequestTwo,reviewer, Reviewer.Channel.SMS);
			
			ReviewUser revieweeThree = createReviewUser(getID()+"@gmail.com");
			Request reviewRequestThree = saveReviewRequest(revieweeThree, item);
			Reviewer reviewerRequestThree= saveReviewerRequest(
					reviewRequestThree,reviewer, Reviewer.Channel.SMS);
			
			saveReview(reviewerRequest, Review.NOT_VERIFED);
			saveReview(reviewerRequestTwo, Review.NOT_VERIFED);
			saveReview(reviewerRequestThree, Review.NOT_VERIFED);
			List<Review> list = reviewDAO.getReviewsByItem(item);
			assertNotNull(list);
			assertEquals(3, list.size());
		}catch(Exception ex){
			ex.printStackTrace();
			fail("should not throw exception");
		}
	}
	
	@Test
	public void testGetVeifiedReviewsForReviewer(){
		try{
			ReviewUser reviewer = createReviewUser(getID()+"@gmail.com");
			ReviewUser reviewee= createReviewUser(getID()+"@gmail.com");
			Item item = createItem(getID()+"");
			
			Request reviewRequest = saveReviewRequest(reviewee, item);
			Reviewer reviewerRequest= saveReviewerRequest(
					reviewRequest,reviewer, Reviewer.Channel.SMS);
			
			ReviewUser revieweeTwo= createReviewUser(getID()+"@gmail.com");
			Request reviewRequestTwo = saveReviewRequest(revieweeTwo, item);
			Reviewer reviewerRequestTwo= saveReviewerRequest(
					reviewRequestTwo,reviewer, Reviewer.Channel.SMS);
			
			ReviewUser revieweeThree = createReviewUser(getID()+"@gmail.com");
			Request reviewRequestThree = saveReviewRequest(revieweeThree, item);
			Reviewer reviewerRequestThree= saveReviewerRequest(
					reviewRequestThree,reviewer, Reviewer.Channel.SMS);
			
			saveReview(reviewerRequest, Review.VERIFED);
			saveReview(reviewerRequestTwo, Review.VERIFED);
			saveReview(reviewerRequestThree, Review.NOT_VERIFED);
			List<Review> list = reviewDAO.getVerifiedReviewsForReviewer(reviewer);
			assertNotNull(list);
			assertEquals(2, list.size());
		}catch(Exception ex){
			ex.printStackTrace();
			fail("should not throw exception");
		}
	}

	
	@Test
	public void testGetPendingVerificationReviewsForReviewee(){
		try{
			
			ReviewUser reviewee = createReviewUser(getID()+"gmail.com");
			Item item = itemDAO.getItem(ITEM);
			ReviewUser reviewerOne = createReviewUser(getID()+"gmail.com");
			ReviewUser reviewerTwo = createReviewUser(getID()+"gmail.com");
			ReviewUser reviewerThree = createReviewUser(getID()+"gmail.com");
			Request reviewRequestOne = saveReviewRequest(reviewee, item);
			Request reviewRequestTwo = saveReviewRequest(reviewee, item);
			Reviewer reviewerRequestOne = saveReviewerRequest(
									reviewRequestOne,reviewerOne, Reviewer.Channel.SMS);
			Reviewer reviewerRequestTwo = saveReviewerRequest(
									reviewRequestOne,reviewerTwo, Reviewer.Channel.SMS);
			Reviewer reviewerRequestThree = saveReviewerRequest(
									reviewRequestTwo,reviewerThree, Reviewer.Channel.SMS);
			Reviewer reviewerRequestFour = saveReviewerRequest(
									reviewRequestTwo,reviewerOne, Reviewer.Channel.SMS);
			saveReview(reviewerRequestOne,Review.NOT_VERIFED);
			saveReview(reviewerRequestTwo,Review.VERIFED);
			saveReview(reviewerRequestThree,Review.NOT_VERIFED);
			saveReview(reviewerRequestFour,Review.NOT_VERIFED);
			List<Review> list = reviewDAO.getPendingVerificationReviewsForReviewee(reviewee);
			assertNotNull(list);
			assertEquals(3,list.size());
		}catch(Exception ex){
			ex.printStackTrace();
			fail("should not throw exception");
		}
	}

	private Item createItem(String description){
		Item item= null;
		try{
			item = new Item();
			item.setCategory(categoryDAO.getCategory(CATEGORY_ID));
			item.setDescription(description);
			assertNull(item.getId());
			itemDAO.add(item);
			assertNotNull(item.getId());
		}catch(Exception ex){
			ex.printStackTrace();
			fail("should not throw exception");
		}
		return item;
	}
	
	private Review saveReview(Reviewer reviewerRequest, char verified){
		Review review = null;
		try{
			review = getReview(reviewerRequest);
			review.setVerified(verified);
			assertNull(review.getReviewID());
			reviewDAO.addReview(review);
			assertNotNull(review.getReviewID());
		}catch(Exception ex){
			ex.printStackTrace();
			fail("should not throw exception");
		}
		return review ;
	}
	
	private Request saveReviewRequest(ReviewUser reviewee, Item item){
		Request reviewRequest = null;
		try{
			reviewRequest = getReviewRequest(reviewee, item);
			reviewRequestDAO.save(reviewRequest);
			assertNotNull(reviewRequest.getRequestID());
		}catch(Exception ex){
			ex.printStackTrace();
			fail("should not throw exception");
		}
		return reviewRequest;
	}
	
	private Reviewer saveReviewerRequest(Request reviewRequest,
										ReviewUser reviewer, Reviewer.Channel channel){
		Reviewer reviewerRequest = null;
		try{
			reviewerRequest = getReviewerRequest(reviewRequest, reviewer, channel);
			reviewerRequestDAO.addReviewer(reviewerRequest);
			assertNotNull(reviewerRequest.getRequestID());
		}catch(Exception ex){
			ex.printStackTrace();
			fail("should not throw exception");
		}
		return reviewerRequest;
	}
	
	@Override
	protected void clear(String id) {
		// TODO Auto-generated method stub
	}
	
	@Autowired
	private ReviewDAO reviewDAO ;
	@Autowired
	private ReviewerDAO reviewerRequestDAO ;
	@Autowired
	private RequestDAO reviewRequestDAO ;
	@Autowired
	private ReviewUserDAO reviewUserDAO;
	@Autowired
	private ItemDAO itemDAO ;
	@Autowired
	private ICategoryDAO categoryDAO;
}
