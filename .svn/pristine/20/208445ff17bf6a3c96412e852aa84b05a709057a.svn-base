package com.system.you.review.web;

import java.io.IOException;

import javax.servlet.FilterChain;
import javax.servlet.ServletException;
import javax.servlet.ServletRequest;
import javax.servlet.ServletResponse;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.apache.commons.lang.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.filter.GenericFilterBean;

import com.system.you.review.core.service.ServiceLocator;
import com.system.you.review.web.domain.Interaction;
import com.system.you.review.web.domain.Requestor;
import com.system.you.review.web.domain.impl.InteractionContainer;
import com.system.you.review.web.domain.impl.InteractionImpl;
import com.system.you.review.web.service.RequestorService;

public class ContextInitializationFilter extends GenericFilterBean {

	@Override
	public void doFilter(ServletRequest request, ServletResponse response,
			FilterChain chain) throws IOException, ServletException {
		try {
			establishContext(request);
			chain.doFilter(request, response);
		} finally {
			resetContext(request);
		}
	}

	private void resetContext(ServletRequest servletRequest) {
		Requestor requestor = InteractionContainer.get().getRequestor();
		if (requestor != null && requestor.isDestroyed()) {
			requestorService.removeRequestor(requestor.getId());
			clearSession(servletRequest);
			;
		}
		InteractionContainer.clear();
	}

	private void establishContext(ServletRequest request) {
		Interaction interaction = new InteractionImpl(serviceLocator);
		Requestor requestor = null;
		try {
			requestor = findRequestor(request);
			((InteractionImpl) interaction).setRequestor(requestor);
		} catch (RequestorNoFoundException e) {
			logger.error("requestor " + e.getId() + ", could not be found");
		}
		interaction.putAttribute(Interaction.REQUEST, request);
		InteractionContainer.set(interaction);
	}

	private Requestor findRequestor(ServletRequest request)
			throws RequestorNoFoundException {
		Requestor requestor = null;
		String requestorId = getRequestorId(request);
		if (Requestor.NEW_REQUESTOR.equalsIgnoreCase(requestorId)
				|| StringUtils.isBlank(requestorId)) {
			requestor = requestorService.create(requestorId);
			setSession(request, requestor);
			return requestor;
		}
		requestor = getExistingRequestor(requestorId);
		if (requestor == null) {
			throw new RequestorNoFoundException(requestorId);
		}

		return requestor;
	}

	private void setSession(ServletRequest request, Requestor requestor) {
		((HttpServletRequest) request).getSession().setAttribute(
				Requestor.REQUESTOR_ID, requestor.getId());
	}

	private Requestor getExistingRequestor(String requestorId) {
		Requestor requestor = requestorService.getRequestor(requestorId);
		return requestor;
	}

	private String getRequestorId(ServletRequest request) {
		HttpSession session = ((HttpServletRequest) request).getSession();
		if (session.isNew()) {
			return Requestor.NEW_REQUESTOR;
		}
		String requestorId = (String) session
				.getAttribute(Requestor.REQUESTOR_ID);
		return requestorId;
	}

	private void clearSession(ServletRequest servletRequest) {
		HttpSession session = ((HttpServletRequest) servletRequest)
				.getSession(false);
		if (session != null) {
			session.removeAttribute(Requestor.REQUESTOR_ID);
			session.invalidate();
		}
	}

	@Autowired
	private ServiceLocator serviceLocator;

	@Autowired
	private RequestorService requestorService;

	private static Logger logger = LoggerFactory
			.getLogger(ContextInitializationFilter.class);
}
