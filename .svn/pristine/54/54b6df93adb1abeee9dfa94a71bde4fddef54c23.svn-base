package com.system.you.review.test.request;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;

import java.util.List;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;

import com.system.you.review.category.bean.Category;
import com.system.you.review.category.dao.ICategoryDAO;
import com.system.you.review.item.bean.Item;
import com.system.you.review.item.dao.ItemDAO;
import com.system.you.review.request.bean.Request;
import com.system.you.review.request.dao.RequestDAO;
import com.system.you.review.test.IConstants;
import com.system.you.review.test.ReviewTestCase;
import com.system.you.review.user.bean.ReviewUser;

@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration(locations=IConstants.TEST_CONFIG_LOCATION)
public class TestReviewRequestDAOImpl extends ReviewTestCase{
	
	@Before
	public void setUp() throws Exception {
	}

	@After
	public void tearDown() throws Exception {
	}
	
	@Test
	public void testAddReviewRequest() {
		Item item = itemDAO.getItem(ITEM);
		saveReviewRequest(createReviewUser(getID()+"@gmail.com"),item);
	}

	@Test
	public void testGetReviewRequestsByReviwee() {
		ReviewUser reviewUser = createReviewUser(getID()+"@gmail.com");
		Item item = itemDAO.getItem(ITEM);
		getAllReviewRequestByReviewee(reviewUser,item);
	}
	
	@Test
	public void testGetReviewRequestsByItem() {
		ReviewUser reviewUser = createReviewUser(getID()+"@gmail.com");
		getAllReviewRequestByItem(reviewUser,getItem());
	}
	
	@Test
	public void testGetReviewRequestsAll() {
		List<Request> list = null ;
		try{
			list = reviewRequestDAO.all();
			assertNotNull(list);
			assertTrue(list.size() > 0);
			System.out.println(list.size());
		}catch(Exception ex){
			fail("should not throw exception");
		}
	}
	
	
	private Item getItem(){
		Item item = new Item();
		item.setDescription("item"+getID());
		item.setCategory(getCategory());
		itemDAO.add(item);
		return item ;
	}
	
	private Category getCategory(){
		Category category = new Category();
		category.setDescription(CATEGORY_BOOK+getID());
		categoryDAO.add(category);
		return category;
	}
	
	private List<Request> getAllReviewRequestByReviewee(ReviewUser reviewee, Item item){
		List<Request> list = null ;
		try{
			saveReviewRequest(reviewee, item);
			saveReviewRequest(reviewee, item);
			list = reviewRequestDAO.get(reviewee);
			assertNotNull(list);
			assertEquals(2, list.size());
		}catch(Exception ex){
			ex.printStackTrace();
			fail("should not throw exception");
		}
		return list;
	}
	
	private List<Request> getAllReviewRequestByItem(ReviewUser reviewee, Item item){
		List<Request> list = null ;
		try{
			saveReviewRequest(reviewee, item);
			saveReviewRequest(reviewee, item);
			list = reviewRequestDAO.get(item);
			assertNotNull(list);
			assertEquals(2, list.size());
		}catch(Exception ex){
			ex.printStackTrace();
			fail("should not throw exception");
		}
		return list;
	}
	
	
	private Request saveReviewRequest(ReviewUser reviewee, Item item){
		Request reviewRequest = null;
		try{
			reviewRequest = getReviewRequest(reviewee, item);
			assertNull(reviewRequest.getRequestID());
			reviewRequestDAO.save(reviewRequest);
			assertNotNull(reviewRequest.getRequestID());
		}catch(Exception ex){
			ex.printStackTrace();
			fail("should not throw exception");
		}
		return reviewRequest;
	}
	
	@Override
	protected void clear(String id) {
	}
	
	@Autowired
	private RequestDAO reviewRequestDAO ;
	@Autowired
	private ItemDAO itemDAO ;
	@Autowired
	private ICategoryDAO categoryDAO;
}
