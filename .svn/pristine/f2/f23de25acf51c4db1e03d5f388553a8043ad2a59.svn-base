package com.system.you.review.web.controller;

import java.util.Set;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.propertyeditors.StringTrimmerEditor;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.WebDataBinder;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.InitBinder;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.servlet.ModelAndView;

import com.system.you.review.core.exception.UIException;
import com.system.you.review.request.exception.CreateRequestException;
import com.system.you.review.request.exception.EditDescriptionException;
import com.system.you.review.request.exception.RequestCloseException;
import com.system.you.review.request.exception.RequestForwardException;
import com.system.you.review.web.UIExceptionFactory;
import com.system.you.review.web.URLGenerator;
import com.system.you.review.web.beans.form.RequestFormBean;
import com.system.you.review.web.beans.form.ReviewForwardFormBean;
import com.system.you.review.web.beans.response.RequestContext;
import com.system.you.review.web.beans.view.RequestViewBean;
import com.system.you.review.web.beans.view.ReviewerViewBean;
import com.system.you.review.web.controller.helper.AddReviewerHelper;
import com.system.you.review.web.controller.helper.CloseRequestHelper;
import com.system.you.review.web.controller.helper.EditRequestDescriptionHelper;
import com.system.you.review.web.controller.helper.RemoveReviewerHelper;
import com.system.you.review.web.controller.helper.RequestCreateHelper;
import com.system.you.review.web.controller.helper.RequestForwardHelper;
import com.system.you.review.web.reviewer.exception.AddReviewerException;
import com.system.you.review.web.reviewer.exception.RemoveReviewerException;

@Controller
@RequestMapping(value = "/Request/")
public class RequestController extends ControllerSupport {

	@InitBinder
	public void dataBinder(WebDataBinder webDataBinder) {
		webDataBinder.registerCustomEditor(String.class, new StringTrimmerEditor(true));
	}

	@RequestMapping(value = "/New")
	public String form(Model model) {
		RequestContext<RequestFormBean, String> responseBean = createHelper.form();
		String formActionURL = URLGenerator.getURL("/Request", "/New/Submit");
		model.addAttribute(FORM_BEAN, responseBean.getFormBean());
		model.addAttribute("formActionURL", formActionURL);
		return defaultView();
	}

	@RequestMapping(value = "/New/Submit")
	public ModelAndView create(Model model, RequestFormBean formBean) throws UIException {
		RequestContext<RequestFormBean, String> requestContext = createHelper
				.createRequest(formBean);
		requestContext.setSuccessView(successView());
		requestContext.setErrorView(errorView());
		requestContext.setModel(model);
		return handleResponse(requestContext, new UIExceptionFactory() {
			@Override
			public UIException create(Model model, String viewName) {
				return new CreateRequestException(model, viewName);
			}
		});
	}

	@RequestMapping(value = "/{requestId}/Close")
	public ModelAndView close(@PathVariable String requestId, Model model) throws UIException {
		RequestContext<String, String> requestContext = closeHelper.close(requestId);
		requestContext.setModel(model);
		requestContext.setSuccessView(JSON);
		requestContext.setErrorView(JSON);
		return handleResponse(requestContext, new UIExceptionFactory() {
			@Override
			public UIException create(Model model, String viewName) {
				return new RequestCloseException(model, viewName);
			}
		});
	}

	@RequestMapping(value = "/{requestId}/Reviewer/Add")
	public String addReviewersForm(@PathVariable String requestId, Model model) {
		model.addAttribute("requestId", requestId);
		return "addReviewer";
	}

	@RequestMapping(value = "/{requestId}/Reviewer/Add/Submit", method = RequestMethod.POST)
	public ModelAndView addReviewers(@RequestParam String requestId, @RequestParam String friends,
			Model model) throws UIException {
		RequestContext<String[], Set<ReviewerViewBean>> requestContext = addReviewerHelper
				.addReviewers(requestId, friends);
		requestContext.setSuccessView(JSON);
		requestContext.setErrorView(JSON);
		requestContext.setModel(model);
		return handleResponse(requestContext, new UIExceptionFactory() {
			@Override
			public UIException create(final Model model, final String viewName) {
				return new AddReviewerException(model, viewName);
			}
		});
	}

	@RequestMapping(value = "/{requestId}/Reviewer/{reviewerId}/Remove")
	public ModelAndView removeReviewer(@PathVariable String requestId,
			@PathVariable String reviewerId, Model model) throws UIException {
		RequestContext<String[], String> requestContext = removeReviewerHelper.removeReviewer(
				requestId, reviewerId);
		requestContext.setSuccessView(JSON);
		requestContext.setErrorView(JSON);
		requestContext.setModel(model);
		return handleResponse(requestContext, new UIExceptionFactory() {
			@Override
			public UIException create(final Model model, final String viewName) {
				return new RemoveReviewerException(model, viewName);
			}
		});
	}

	@RequestMapping(value = "/{requestId}/Description/Edit", method = RequestMethod.POST)
	public ModelAndView editDescription(@PathVariable String requestId,
			@RequestParam(value = "value") String description, Model model) throws UIException {
		RequestContext<String[], String> requestContext = editDescriptionHelper.editDescription(
				requestId, description);
		requestContext.setSuccessView(JSON);
		requestContext.setErrorView(JSON);
		requestContext.setModel(model);
		return handleResponse(requestContext, new UIExceptionFactory() {
			@Override
			public UIException create(final Model model, final String viewName) {
				return new EditDescriptionException(model, viewName);
			}
		});
	}

	@RequestMapping(value = "/{requestId}/Reviewer/{reviewerId}/Forward/New")
	public String forwardRequestForm(@PathVariable String requestId,
			@PathVariable String reviewerId, Model model) {
		model.addAttribute("requestId", applyXXFilter(requestId));
		model.addAttribute("reviewerId", applyXXFilter(reviewerId));
		return "forward";
	}

	@RequestMapping(value = "/{requestId}/Reviewer/{reviewerId}/Forward/New/Submit")
	public ModelAndView forwardRequestSubmit(ReviewForwardFormBean formBean, Model model)
			throws UIException {
		RequestContext<ReviewForwardFormBean, RequestViewBean> requestContext = forwardHelper
				.submit(formBean);
		String viewName = "forward";
		requestContext.setSuccessView(viewName);
		requestContext.setErrorView(viewName);
		requestContext.setModel(model);
		return handleResponse(requestContext, new UIExceptionFactory() {
			@Override
			public UIException create(final Model model, final String viewName) {
				return new RequestForwardException(model, viewName);
			}
		});
	}

	@ExceptionHandler(value = { CreateRequestException.class, RequestCloseException.class,
			RemoveReviewerException.class, AddReviewerException.class,
			EditDescriptionException.class, RequestForwardException.class, UIException.class })
	@ResponseStatus(value = HttpStatus.BAD_REQUEST)
	public ModelAndView handleException(UIException ex) {
		ModelAndView modelAndView = new ModelAndView(ex.getViewName());
		modelAndView.addAllObjects(ex.getModel().asMap());
		return modelAndView;
	}

	private String errorView() {
		return defaultView();
	}

	private String successView() {
		return "redirect:/profile";
	}

	private String defaultView() {
		return "request/review";
	}

	@Autowired
	private RequestCreateHelper createHelper;

	@Autowired
	private CloseRequestHelper closeHelper;

	@Autowired
	private RemoveReviewerHelper removeReviewerHelper;

	@Autowired
	private AddReviewerHelper addReviewerHelper;

	@Autowired
	private RequestForwardHelper forwardHelper;

	@Autowired
	private EditRequestDescriptionHelper editDescriptionHelper;

	private static Logger logger = LoggerFactory.getLogger(RequestController.class);
}
