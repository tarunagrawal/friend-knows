package com.system.you.review.web.controller;

import org.apache.commons.lang.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.servlet.ModelAndView;

import com.system.you.review.core.exception.UIException;
import com.system.you.review.web.beans.form.ReviewFormBean;
import com.system.you.review.web.beans.response.RequestContext;
import com.system.you.review.web.beans.view.ReviewViewBean;
import com.system.you.review.web.controller.helper.AddReviewHelper;
import com.system.you.review.web.controller.helper.DeleteReviewHelper;
import com.system.you.review.web.controller.helper.EditReviewHelper;
import com.system.you.review.web.controller.helper.VerifyReviewHelper;
import com.system.you.review.web.review.ReviewCreateException;
import com.system.you.review.web.review.ReviewDeleteException;
import com.system.you.review.web.review.ReviewEditException;
import com.system.you.review.web.review.ReviewVerifyException;

@Controller
@RequestMapping(value = "/Request/{requestId}/Reviewer/{reviewerId}/Review/")
public class ReviewController extends ControllerSupport {

	@RequestMapping(value = "/New")
	@ResponseStatus(value = HttpStatus.OK)
	public String addForm(@PathVariable String requestId,
			@PathVariable String reviewerId, Model model) {
		setRequestAndReviewerIds(requestId, reviewerId, model);
		return "addReview";
	}

	private void setRequestAndReviewerIds(String requestId, String reviewerId,
			Model model) {
		model.addAttribute("requestId", applyXXFilter(requestId));
		model.addAttribute("reviewerId", applyXXFilter(reviewerId));
	}

	@RequestMapping(value = "/New/Submit")
	@ResponseStatus(value = HttpStatus.OK)
	public ModelAndView addSubmit(ReviewFormBean formBean, Model model)
			throws ReviewCreateException {
		RequestContext<ReviewFormBean, ReviewViewBean> respBean = addReviewHelper
				.submit(formBean);
		model.addAttribute(FORM_BEAN, respBean.getFormBean());
		if (respBean.containsMessage()) {
			model.addAttribute(MESSAGES, respBean.getMessages());
			throw new ReviewCreateException(model, JSON);
		}
		model.addAttribute(VIEW_BEAN, respBean.getViewBean());
		return new ModelAndView(JSON, model.asMap());
	}

	@RequestMapping(value = "/{reviewId}/Edit")
	@ResponseStatus(value = HttpStatus.OK)
	public String editForm(@PathVariable String requestId,
			@PathVariable String reviewerId, @PathVariable String reviewId,
			Model model) throws ReviewEditException {
		try {
			RequestContext<String, ReviewViewBean> requestContext = editReviewHelper
					.editForm(reviewId);
			model.addAttribute(VIEW_BEAN, requestContext.getViewBean());
			setRequestAndReviewerIds(requestId, reviewerId, model);
		} catch (Exception ex) {
			throw new ReviewEditException(model, "editReview",
					"error occured while getting review edit form", ex);
		}
		return "editReview";
	}

	@RequestMapping(value = "/{reviewId}/Edit/Submit")
	@ResponseStatus(value = HttpStatus.OK)
	public ModelAndView edit(ReviewFormBean formBean, Model model)
			throws ReviewEditException {
		// Using reviewer Request Id as review id for edit purpose. Saves us a
		// formBean
		RequestContext<ReviewFormBean, ReviewViewBean> requestContext = editReviewHelper
				.edit(formBean);
		String viewName = "editReview";
		if (requestContext.containsMessage()) {
			model.addAttribute(VIEW_BEAN, requestContext.getFormBean());
			model.addAttribute(MESSAGES, requestContext.getMessages());
			throw new ReviewEditException(model, viewName);
		}
		model.addAttribute(VIEW_BEAN, requestContext.getViewBean());
		return new ModelAndView(viewName, model.asMap());
	}

	@RequestMapping(value = "/{reviewId}/Remove")
	@ResponseStatus(value = HttpStatus.OK)
	public ModelAndView delete(@PathVariable String reviewId, Model model)
			throws ReviewDeleteException {
		RequestContext<String, String> responseBean = deleteReviewHelper
				.delete(reviewId);
		model.addAttribute(FORM_BEAN, responseBean.getFormBean());
		if (responseBean.containsMessage()) {
			model.addAttribute(MESSAGES, responseBean.getMessages());
			throw new ReviewDeleteException(model, JSON);
		}
		model.addAttribute(VIEW_BEAN, responseBean.getViewBean());
		return new ModelAndView(JSON, model.asMap());
	}

	@RequestMapping(value = "/{reviewID}/Verify")
	@ResponseStatus(value = HttpStatus.OK)
	public ModelAndView verify(@PathVariable String reviewId, Model model)
			throws ReviewVerifyException {
		RequestContext<String, String> responseBean = verifyReviewHelper
				.verify(reviewId);
		if (responseBean.containsMessage()) {
			model.addAttribute(MESSAGES, responseBean.getMessages());
			throw new ReviewVerifyException(model, JSON);
		}
		return new ModelAndView(JSON, model.asMap());
	}

	@ExceptionHandler(value = { ReviewCreateException.class,
			ReviewEditException.class, ReviewDeleteException.class,
			ReviewVerifyException.class })
	@ResponseStatus(value = HttpStatus.BAD_REQUEST)
	public ModelAndView handleUIException(UIException uiException) {
		String message = uiException.getMessage();
		Throwable cause = uiException.getCause();
		logger.error((StringUtils.isBlank(message)) ? "" : message, cause);
		return new ModelAndView(uiException.getViewName(), uiException
				.getModel().asMap());
	}

	@Autowired
	private AddReviewHelper addReviewHelper;

	@Autowired
	private EditReviewHelper editReviewHelper;

	@Autowired
	private DeleteReviewHelper deleteReviewHelper;

	@Autowired
	private VerifyReviewHelper verifyReviewHelper;

	private static Logger logger = LoggerFactory
			.getLogger(ReviewController.class);
}
