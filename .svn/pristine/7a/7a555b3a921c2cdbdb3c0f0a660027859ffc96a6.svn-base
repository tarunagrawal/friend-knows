package com.system.you.review.item.bean.helper.impl;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.system.you.review.item.bean.Item;
import com.system.you.review.item.bean.helper.BeanHelper;
import com.system.you.review.request.bean.Request;
import com.system.you.review.request.bean.Reviewer;
import com.system.you.review.web.beans.form.RequestFormBean;
import com.system.you.review.web.beans.view.RequestViewBean;
import com.system.you.review.web.beans.view.ReviewerViewBean;

@Service
public class RequestBeanHelper extends BeanHelper {

	public Request formToData(RequestFormBean formBean) {
		Request dbBean = new Request();
		Date current = current();
		dbBean.setParentRequest(null);
		dbBean.setCreateDateTime(current);
		dbBean.setUpdateDateTime(current);
		dbBean.setDescription(applyXSSFilter(formBean.getDescription()));
		dbBean.setReviewee(currentUser());
		dbBean.setStatus(Request.Status.INITIATED);
		dbBean.setItem(item(formBean));
		Collection<Reviewer> collection = reviewerBeanHelper.formToData(reviewerBeanHelper
				.stringToForms(formBean.getFriends()));
		Set<Reviewer> reviewers = new HashSet<Reviewer>();
		reviewers.addAll(collection);
		dbBean.setReviewers(reviewers);
		return dbBean;
	}

	private Item item(RequestFormBean formBean) {
		return itemBeanHelper.formToData(formBean.getCategory(), formBean.getItem());
	}

	public RequestViewBean dataToView(Request dbBean) {
		checkNulls(dbBean);
		RequestViewBean viewBean = new RequestViewBean();
		viewBean.setId(dbBean.getRequestID());
		viewBean.setCreateDateTime(date(dbBean.getCreateDateTime()));
		viewBean.setUpdateDatetime(date(dbBean.getUpdateDateTime()));
		viewBean.setDescription(applyXSSFilter(dbBean.getDescription()));
		Item item = dbBean.getItem();
		viewBean.setItem(itemBeanHelper.dataToView(item));
		viewBean.setCategory(categoryBeanHelper.dataToView(item.getCategory()));
		Collection<Reviewer> reviewers = dbBean.getReviewers();
		List<ReviewerViewBean> reviewerViewBean = new ArrayList<ReviewerViewBean>();
		if (reviewers != null && !reviewers.isEmpty()) {
			for (Reviewer reviewer : reviewers) {
				reviewerViewBean.add(reviewerBeanHelper.dataToView(reviewer));
			}
		}

		/*Collections.sort(reviewerViewBean, new Comparator<ReviewerViewBean>() {
			@Override
			public int compare(ReviewerViewBean o1, ReviewerViewBean o2) {
				DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS");
				String o1Date = o1.getCreateDateTime();
				String o2Date = o2.getCreateDateTime();
				try {
					return dateFormat.parse(o2Date).compareTo(dateFormat.parse(o1Date));
				} catch (Exception ex) {
					ex.printStackTrace();
					return o1Date.compareTo(o2Date);
				}
			}
		});*/

		// DateUtils.sortByCreateDateTime(reviewerViewBean, SortOrder);

		viewBean.setReviewers(reviewerViewBean);
		if (dbBean.getParentRequest() != null) {
			viewBean.setParentRequest(new RequestViewBean());
		}
		return viewBean;
	}

	@Autowired
	private ItemBeanHelper itemBeanHelper;

	@Autowired
	private CategoryBeanHelper categoryBeanHelper;

	@Autowired
	private ReviewerBeanHelper reviewerBeanHelper;
}
