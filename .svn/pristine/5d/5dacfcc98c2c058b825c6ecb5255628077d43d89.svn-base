package com.system.you.review.core.lock.impl;

import java.util.concurrent.locks.Lock;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.hazelcast.core.HazelcastInstance;
import com.system.you.review.core.lock.LockProvider;

public class LockProviderImpl implements LockProvider {

	public LockProviderImpl(HazelcastInstance hzInstance) {
		this.instance = hzInstance;
	}

	@Override
	public boolean lock(String key) {
		boolean acqiured = false;
		try {
			Lock lock = getLock(key);
			acqiured = lock.tryLock();
			if(logger.isDebugEnabled()){
				logger.debug("lock aquired on " +  key);
			}
			return acqiured;
		} catch (Exception ex) {
			logger.error("error while acquiring the lock ", ex);
		}
		return acqiured;
	}

	@Override
	public boolean unlock(String key) {
		try {
			Lock lock = getLock(key);
			lock.unlock();
			if(logger.isDebugEnabled()){
				logger.debug("lock released on " +  key);
			}
			return true;
		} catch (Exception ex) {
			logger.error("error while acquiring the lock ", ex);
		}
		return false;
	}

	
	private Lock getLock(String key) {
		return instance.getLock(key);
	}

	private HazelcastInstance instance;

	private Logger logger = LoggerFactory.getLogger(LockProviderImpl.class);

}
