package com.system.you.review.web.controller;

import java.util.Collection;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

import javax.validation.ConstraintViolation;
import javax.validation.Validator;

import org.springframework.beans.factory.annotation.Autowired;

import com.system.you.review.core.constraint.Constraint;
import com.system.you.review.core.constraint.impl.ConstraintFactory;
import com.system.you.review.user.bean.ReviewUser;
import com.system.you.review.web.domain.Requestor;
import com.system.you.review.web.domain.impl.InteractionContainer;

public class ControllerSupport {

	protected <T> Map<String, String> errorMap(
			Set<ConstraintViolation<T>> errors) {
		Map<String, String> errorMap = new HashMap<String, String>();
		for (ConstraintViolation<T> constraintViolation : errors) {
			errorMap.put(constraintViolation.getPropertyPath().toString(),
					constraintViolation.getMessage());
		}
		return errorMap;
	}

	protected Map<String, String> errorMap(Collection<Constraint> constraints) {
		Map<String, String> errorMap = new HashMap<String, String>();
		for (Constraint constraint : constraints) {
			errorMap.put(constraint.getPath(), constraint.getMessage());
		}
		return errorMap;
	}

	protected ReviewUser getLoggedInUser() {
		return getRequestor().getUser();
	}

	protected Requestor getRequestor() {
		return InteractionContainer.get().getRequestor();
	}

	protected <T> Collection<Constraint> validate(T formBean) {
		Set<ConstraintViolation<T>> errors = validator.validate(formBean);
		Collection<Constraint> constraintViolations = new HashSet<Constraint>();
		if (errors != null && !errors.isEmpty()) {
			for (ConstraintViolation<T> constraintViolation : errors) {
				ConstraintFactory constraintCreater = ConstraintFactory
						.getInstance();
				String path = constraintViolation.getPropertyPath().toString();
				String message = constraintViolation.getMessage();
				Constraint constraint = constraintCreater.getConstraint(path,
						message);
				constraintViolations.add(constraint);
			}
		}
		return constraintViolations;
	}

	protected Collection<Constraint> emptyContrainsts() {
		return new HashSet<Constraint>();
	}

	protected Collection<Constraint> getSystemError() {
		Collection<Constraint> errors = emptyContrainsts();
		errors.add(ConstraintFactory.getInstance().getConstraint("default",
				"runtime exception"));
		return errors;
	}

	@Autowired
	private Validator validator;
}
