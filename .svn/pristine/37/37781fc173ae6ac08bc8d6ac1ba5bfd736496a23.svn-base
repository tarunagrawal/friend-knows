package com.system.you.review.web.controller;

import java.util.Collection;

import org.apache.commons.lang.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.servlet.ModelAndView;

import com.system.you.review.core.constraint.Constraint;
import com.system.you.review.core.helper.CollectionHelper;
import com.system.you.review.request.bean.Request;
import com.system.you.review.request.exception.CreateRequestException;
import com.system.you.review.request.exception.RequestCloseException;
import com.system.you.review.request.service.RequestService;
import com.system.you.review.web.URLGenerator;
import com.system.you.review.web.beans.form.RequestFormBean;
import com.system.you.review.web.beans.response.ResponseBean;

@Controller
@RequestMapping(value = "/Request/")
public class RequestController extends ControllerSupport {

	@RequestMapping(value = "/New")
	public String newForm(Model model) {
		ResponseBean<RequestFormBean> responseBean = responseBean(NEW_FORM);
		String formActionURL = URLGenerator.getURL("/Request", "/New/Submit");
		model.addAttribute("bean", responseBean.getBean());
		model.addAttribute("formActionURL", formActionURL);
		return defaultView();
	}

	@RequestMapping(value = "/New/Submit")
	public String submit(Model model, RequestFormBean formBean)
			throws CreateRequestException {
		ResponseBean<RequestFormBean> responseBean = createRequest(formBean);
		model.addAttribute("bean", responseBean.getBean());
		if (responseBean.containsError()) {
			model.addAttribute("messages", responseBean.getMessages());
			// Throw CreateRequestExcetion - it will send error view
			throw new CreateRequestException(model, errorView());
		}
		return successView();
	}

	@RequestMapping(value = "/{requestId}/Close")
	public ModelAndView close(@PathVariable String requestId, Model model)
			throws RequestCloseException {
		ResponseBean<String> responseBean = new ResponseBean<String>("");
		if (StringUtils.isBlank(requestId)) {
			responseBean.addMessage("page", "Please supply request id");
		}

		if (!responseBean.containsError()) {
			try {
				boolean closed = requestService.close(requestId);
				if (closed) {
					responseBean
							.addMessage("page", "request can not be closed");
				}
			} catch (Exception ex) {
				responseBean.addMessage("page", "please try later");
			}
		}

		if (responseBean.containsError()) {
			model.addAttribute("messages", responseBean.getMessages());
			throw new RequestCloseException(model, "json");
		}

		return new ModelAndView("json", model.asMap());
	}

	@ExceptionHandler(value = CreateRequestException.class)
	@ResponseStatus(value = HttpStatus.BAD_REQUEST)
	public ModelAndView handleCreateRequestException(CreateRequestException ex) {
		ModelAndView modelAndView = new ModelAndView(ex.getViewName());
		modelAndView.addAllObjects(ex.getModel().asMap());
		return modelAndView;
	}

	private ResponseBean<RequestFormBean> createRequest(RequestFormBean formBean) {
		ResponseBean<RequestFormBean> respBean = new ResponseBean<RequestFormBean>(
				formBean);
		try {
			validateFormBean(formBean, respBean);
			if (!respBean.containsError()) {
				Request reviewRequest = requestService.create(formBean);
				if (reviewRequest == null) {
					respBean.addMessage("page", "please try later");
				}
			}
		} catch (Exception ex) {
			respBean.addMessage("page", "please try later");
			logger.error("error while creating request", ex);
		}
		return respBean;
	}

	private void validateFormBean(RequestFormBean formBean,
			ResponseBean<RequestFormBean> respBean) {
		Collection<Constraint> errors = validate(formBean);
		if (CollectionHelper.hasElements(errors)) {
			respBean.setMessages(errorMap(errors));
		}
	}

	private ResponseBean<RequestFormBean> responseBean(RequestFormBean formBean) {
		ResponseBean<RequestFormBean> responseBean = null;
		if (formBean == NEW_FORM) {
			responseBean = new ResponseBean<RequestFormBean>(
					new RequestFormBean());
		} else {
			responseBean = new ResponseBean<RequestFormBean>(formBean);
		}
		return responseBean;
	}

	private String errorView() {
		return defaultView();
	}

	private String successView() {
		return "redirect:/profile";
	}

	private String defaultView() {
		return "request/review";
	}

	@Autowired
	private RequestService requestService;

	private static RequestFormBean NEW_FORM = null;
	private static Logger logger = LoggerFactory
			.getLogger(RequestController.class);
}
